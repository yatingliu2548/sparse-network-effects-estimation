edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.3,                  # Increase arrow size
edge.width = edge_weights,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *2 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.3,                  # Increase arrow size
edge.width = edge_weights,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *2 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.5,                  # Increase arrow size
edge.width = edge_weights,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *2 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.5,                  # Increase arrow size
edge.width = edge_weights,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *1.5 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.5,                  # Increase arrow size
edge.width = edge_weights,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *1.5 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
##heatmap with 20 countries with most frequent value
# Calculate total mentions for each country
top_countries <- loaded_data %>%
select(country1, country2, mentions) %>%       # Select relevant columns
pivot_longer(cols = c(country1, country2),     # Combine country1 and country2 into one column
names_to = "role",
values_to = "country") %>%
group_by(country) %>%                          # Group by country
summarise(total_mentions = sum(mentions, na.rm = TRUE)) %>%  # Calculate total mentions
arrange(desc(total_mentions)) %>%              # Sort by most mentions
slice_head(n =30)                             # Select top 20 countries
top_c <- function(data){
# Filter the original data for only the top 20 countries
filtered_data <- data %>%
filter(country1 %in% top_countries$country, country2 %in% top_countries$country)
return(filtered_data)
}
adj_matrix2=adj_m(top_c(data2023))
# Convert adjacency matrix to directed graph
g <- graph_from_adjacency_matrix(adj_matrix2, mode = "directed", weighted = TRUE, diag = FALSE)
# Compute node degree for sizing
node_size <- degree(g, mode = "all") + 1  # Add 1 to avoid size zero
# Extract edge weights
edge_weights <- E(g)$weight
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *1.5 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
# Convert adjacency matrix to long format for ggplot2
adj_matrix1=adj_m(top_c(data2010))
# Convert adjacency matrix to directed graph
g <- graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = TRUE, diag = FALSE)
# Compute node degree for sizing
node_size <- degree(g, mode = "all") + 1  # Add 1 to avoid size zero
# Extract edge weights
edge_weights <- E(g)$weight
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.1,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "Customized Directed Graph"
)
set.seed(123)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.1,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "2010-2016"
)
# Convert adjacency matrix to directed graph
g <- graph_from_adjacency_matrix(adj_matrix2, mode = "directed", weighted = TRUE, diag = FALSE)
# Compute node degree for sizing
node_size <- degree(g, mode = "all") + 1  # Add 1 to avoid size zero
# Extract edge weights
edge_weights <- E(g)$weight
set.seed(123)
# Plot the graph with customizations
plot(
g,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.1,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "2010-2016"
)
library(ggraph)
install.packages("ggraph")
library(ggraph)
library(tidygraph)
# Convert igraph object to tidygraph
g_tidy <- as_tbl_graph(g)
# Set a fixed layout with a seed
set.seed(123)
node_layout <- create_layout(g_tidy, layout = "fr")  # Fruchterman-Reingold layout
# Plot using ggraph with fixed layout
ggraph(node_layout) +
geom_edge_link(aes(width = weight), arrow = arrow(length = unit(4, 'mm')), end_cap = circle(3, 'mm')) +
geom_node_point(aes(size = degree(g)), color = "skyblue") +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
scale_edge_width(range = c(0.5, 3)) +  # Scale edge width
scale_size(range = c(3, 10)) +  # Scale node size
theme_void() +
ggtitle("Advanced Directed Graph with Fixed Layout")
# Convert adjacency matrix to directed graph
g <- graph_from_adjacency_matrix(adj_matrix2, mode = "directed", weighted = TRUE, diag = FALSE)
# Compute node degree for sizing
node_size <- degree(g, mode = "all") + 1  # Add 1 to avoid size zero
# Extract edge weights
edge_weights <- E(g)$weight
set.seed(123)  # Use any fixed seed
layout_fixed <- layout_with_fr(g)  # Fruchterman-Reingold layout
# Plot the graph with customizations
plot(
g,
layout = layout_fixed,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.1,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "2010-2016"
)
# Convert adjacency matrix to directed graph
g <- graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = TRUE, diag = FALSE)
# Compute node degree for sizing
node_size <- degree(g, mode = "all") + 1  # Add 1 to avoid size zero
# Extract edge weights
edge_weights <- E(g)$weight
set.seed(123)  # Use any fixed seed
layout_fixed <- layout_with_fr(g)  # Fruchterman-Reingold layout
# Plot the graph with customizations
plot(
g,
layout = layout_fixed,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.1,              # Edge width based on adjacency values
edge.color = "gray",                    # Edge color
main = "2010-2016"
)
g1=g
# Convert adjacency matrix to directed graph
g <- graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = TRUE, diag = FALSE)
# Compute node degree for sizing
node_size <- degree(g, mode = "all") + 1  # Add 1 to avoid size zero
# Extract edge weights
edge_weights <- E(g)$weight
set.seed(123)  # Use any fixed seed
layout_fixed <- layout_with_fr(g1)  # Fruchterman-Reingold layout
# Plot the graph with customizations
plot(
g,
layout = layout_fixed,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.1,              # Edge width based on adjacency values
edge.color = "gray57",                    # Edge color
main = "2010-2016"
)
# Convert adjacency matrix to directed graph
g <- graph_from_adjacency_matrix(adj_matrix2, mode = "directed", weighted = TRUE, diag = FALSE)
# Compute node degree for sizing
node_size <- degree(g, mode = "all") + 1  # Add 1 to avoid size zero
# Extract edge weights
edge_weights <- E(g)$weight
set.seed(123)  # Use any fixed seed
layout_fixed <- layout_with_fr(g1)  # Fruchterman-Reingold layout
# Plot the graph with customizations
plot(
g,
layout = layout_fixed,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.1,              # Edge width based on adjacency values
edge.color = "gray57",                    # Edge color
main = "2010-2016"
)
# Plot the graph with customizations
plot(
g,
layout = layout_fixed,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.2,              # Edge width based on adjacency values
edge.color = "gray57",                    # Edge color
main = "2010-2016"
)
# Plot the graph with customizations
plot(
g,
layout = layout_fixed,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*2,              # Edge width based on adjacency values
edge.color = "gray57",                    # Edge color
main = "2010-2016"
)
# Plot the graph with customizations
plot(
g,
layout = layout_fixed,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.5,              # Edge width based on adjacency values
edge.color = "gray57",                    # Edge color
main = "2010-2016"
)
g1=g
# Convert adjacency matrix to directed graph
g <- graph_from_adjacency_matrix(adj_matrix2, mode = "directed", weighted = TRUE, diag = FALSE)
# Compute node degree for sizing
node_size <- degree(g, mode = "all") + 1  # Add 1 to avoid size zero
# Extract edge weights
edge_weights <- E(g)$weight
set.seed(123)  # Use any fixed seed
layout_fixed <- layout_with_fr(g1)  # Fruchterman-Reingold layout
# Plot the graph with customizations
plot(
g,
layout = layout_fixed,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.5,              # Edge width based on adjacency values
edge.color = "gray57",                    # Edge color
main = "2010-2016"
)
# Plot the graph with customizations
plot(
g,
layout = layout_fixed,
vertex.size = node_size *1.2 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.5,              # Edge width based on adjacency values
edge.color = "gray57",                    # Edge color
main = "2010-2016"
)
# Plot the graph with customizations
plot(
g,
layout = layout_fixed,
vertex.size = node_size *1.3 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.5,              # Edge width based on adjacency values
edge.color = "gray57",                    # Edge color
main = "2010-2016"
)
# Plot the graph with customizations
plot(
g,
layout = layout_fixed,
vertex.size = node_size *1.3 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.5,              # Edge width based on adjacency values
edge.color = "gray57",                    # Edge color
main = "2017-2023"
)
# Convert adjacency matrix to directed graph
g <- graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = TRUE, diag = FALSE)
# Compute node degree for sizing
node_size <- degree(g, mode = "all") + 1  # Add 1 to avoid size zero
# Extract edge weights
edge_weights <- E(g)$weight
set.seed(123)  # Use any fixed seed
layout_fixed <- layout_with_fr(g1)  # Fruchterman-Reingold layout
# Plot the graph with customizations
plot(
g,
layout = layout_fixed,
vertex.size = node_size *1.3 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.5,              # Edge width based on adjacency values
edge.color = "gray57",                    # Edge color
main = "2017-2023"
)
# Plot the graph with customizations
plot(
g,
layout = layout_fixed,
vertex.size = node_size *1.2 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.5,              # Edge width based on adjacency values
edge.color = "gray57",                    # Edge color
main = "2017-2023"
)
# Plot the graph with customizations
plot(
g,
layout = layout_fixed,
vertex.size = node_size *1.1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.5,              # Edge width based on adjacency values
edge.color = "gray57",                    # Edge color
main = "2017-2023"
)
# Plot the graph with customizations
plot(
g,
layout = layout_fixed,
vertex.size = node_size *1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.5,              # Edge width based on adjacency values
edge.color = "gray57",                    # Edge color
main = "2017-2023"
)
# Plot the graph with customizations
plot(
g,
layout = layout_fixed,
vertex.size = node_size *1 ,            # Scale node sizes by degree
vertex.label.color = "black",           # Node label color
vertex.color = "skyblue",               # Node color
edge.arrow.size = 0.4,                  # Increase arrow size
edge.width = edge_weights*1.5,              # Edge width based on adjacency values
edge.color = "gray57",                    # Edge color
main = "2010-2016"
)
